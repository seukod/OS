<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/menus/menu_indice.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/menus/menu_indice.cpp" />
              <option name="originalContent" value="#include &quot;../../include/menus/menu_indice.h&quot;&#10;#include &quot;../../include/interfaz.h&quot;&#10;#include &quot;../../include/utils/input_utils.h&quot;&#10;#include &quot;../../include/users_auth.h&quot;&#10;#include &quot;../../include/process_tools/process_manager.h&quot;&#10;#include &lt;iostream&gt;&#10;#include &lt;sys/stat.h&gt;&#10;#include &lt;unistd.h&gt;&#10;&#10;using namespace std;&#10;&#10;bool validarNombreArchivo(const string&amp; nombreArchivo) {&#10;    if (nombreArchivo.length() &lt; 5) {&#10;        return false;&#10;    }&#10;    return nombreArchivo.substr(nombreArchivo.length() - 4) == &quot;.idx&quot;;&#10;}&#10;&#10;bool validarDirectorio(const string&amp; pathDirectorio) {&#10;    struct stat info;&#10;    if (stat(pathDirectorio.c_str(), &amp;info) != 0) {&#10;        return false; // No existe&#10;    }&#10;    return (info.st_mode &amp; S_IFDIR) != 0; // Es un directorio&#10;}&#10;&#10;bool crearIndiceInvertido(const string&amp; nombreArchivo, const string&amp; pathCarpeta) {&#10;    cout &lt;&lt; &quot;\n=================================================&quot; &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;           CREANDO ÍNDICE INVERTIDO              &quot; &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;=================================================&quot; &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;Archivo: &quot; &lt;&lt; nombreArchivo &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;Directorio libros: &quot; &lt;&lt; pathCarpeta &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;=================================================&quot; &lt;&lt; endl;&#10;&#10;    // La función ejecutarProcesoExterno ya imprime sus propios mensajes&#10;    bool exito = ejecutarProcesoExterno(&quot;CREATE_INDEX&quot;, nombreArchivo, pathCarpeta);&#10;&#10;    return exito;&#10;}&#10;&#10;void ejecutarMenuIndice() {&#10;    limpiarPantalla();&#10;    cout &lt;&lt; &quot;=================================================&quot; &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;           CREAR ÍNDICE INVERTIDO                &quot; &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;=================================================&quot; &lt;&lt; endl;&#10;    &#10;    string nombreArchivo;&#10;    string pathCarpeta;&#10;    &#10;    // Paso 1: Ingresar y validar nombre del archivo con bucle&#10;    do {&#10;        cout &lt;&lt; &quot;\nIngrese el nombre del archivo a crear (debe terminar en .idx): &quot;;&#10;        getline(cin, nombreArchivo);&#10;        &#10;        if (nombreArchivo.empty()) {&#10;            cout &lt;&lt; &quot;[ERROR] El nombre no puede estar vacío.&quot; &lt;&lt; endl;&#10;        } else if (!validarNombreArchivo(nombreArchivo)) {&#10;            cout &lt;&lt; &quot;[ERROR] El archivo debe tener extensión .idx&quot; &lt;&lt; endl;&#10;        } else {&#10;            break;&#10;        }&#10;    } while (true);&#10;    &#10;    // Paso 2: Ingresar y validar path de la carpeta con bucle&#10;    do {&#10;        cout &lt;&lt; &quot;\nIngrese el path de la carpeta donde están los libros: &quot;;&#10;        getline(cin, pathCarpeta);&#10;        &#10;        if (pathCarpeta.empty()) {&#10;            cout &lt;&lt; &quot;[ERROR] El path no puede estar vacío.&quot; &lt;&lt; endl;&#10;        } else if (!validarDirectorio(pathCarpeta)) {&#10;            cout &lt;&lt; &quot;[ERROR] El directorio no existe o no es válido.&quot; &lt;&lt; endl;&#10;            cout &lt;&lt; &quot;Verifique que el path sea correcto.&quot; &lt;&lt; endl;&#10;        } else {&#10;            break;&#10;        }&#10;    } while (true);&#10;    &#10;    // Paso 3: Confirmar antes de ejecutar con validación&#10;    cout &lt;&lt; &quot;\n=================================================&quot; &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;RESUMEN:&quot; &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;Archivo a crear: &quot; &lt;&lt; nombreArchivo &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;Directorio de libros: &quot; &lt;&lt; pathCarpeta &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;=================================================&quot; &lt;&lt; endl;&#10;    &#10;    char confirmacion;&#10;    do {&#10;        cout &lt;&lt; &quot;¿Desea proceder? (s/n): &quot;;&#10;        cin &gt;&gt; confirmacion;&#10;        cin.ignore(); // Limpiar buffer&#10;&#10;        if (confirmacion == 's' || confirmacion == 'S' || confirmacion == 'n' || confirmacion == 'N') {&#10;            break;&#10;        } else {&#10;            cout &lt;&lt; &quot;[ERROR] Por favor ingrese 's' para sí o 'n' para no.&quot; &lt;&lt; endl;&#10;        }&#10;    } while (true);&#10;&#10;    if (confirmacion == 's' || confirmacion == 'S') {&#10;        // Paso 4: Ejecutar programa externo&#10;        crearIndiceInvertido(nombreArchivo, pathCarpeta);&#10;        // El proceso hijo ya muestra los mensajes de resultado&#10;    } else {&#10;        cout &lt;&lt; &quot;\nOperación cancelada por el usuario.&quot; &lt;&lt; endl;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="#include &quot;../../include/menus/menu_indice.h&quot;&#10;#include &quot;../../include/interfaz.h&quot;&#10;#include &quot;../../include/utils/input_utils.h&quot;&#10;#include &quot;../../include/users_auth.h&quot;&#10;#include &quot;../../include/process_tools/process_manager.h&quot;&#10;#include &lt;iostream&gt;&#10;#include &lt;sys/stat.h&gt;&#10;#include &lt;unistd.h&gt;&#10;&#10;using namespace std;&#10;&#10;bool validarNombreArchivo(const string&amp; nombreArchivo) {&#10;    if (nombreArchivo.length() &lt; 5) {&#10;        return false;&#10;    }&#10;    return nombreArchivo.substr(nombreArchivo.length() - 4) == &quot;.idx&quot;;&#10;}&#10;&#10;bool validarDirectorio(const string&amp; pathDirectorio) {&#10;    struct stat info;&#10;    if (stat(pathDirectorio.c_str(), &amp;info) != 0) {&#10;        return false; // No existe&#10;    }&#10;    return (info.st_mode &amp; S_IFDIR) != 0; // Es un directorio&#10;}&#10;&#10;bool crearIndiceInvertido(const string&amp; nombreArchivo, const string&amp; pathCarpeta) {&#10;    cout &lt;&lt; &quot;\n=================================================&quot; &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;           CREANDO ÍNDICE INVERTIDO              &quot; &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;=================================================&quot; &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;Archivo: &quot; &lt;&lt; nombreArchivo &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;Directorio libros: &quot; &lt;&lt; pathCarpeta &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;=================================================&quot; &lt;&lt; endl;&#10;&#10;    // La función ejecutarProcesoExterno ya imprime sus propios mensajes&#10;    bool exito = ejecutarProcesoExterno(&quot;CREATE_INDEX&quot;, nombreArchivo, pathCarpeta);&#10;&#10;    return exito;&#10;}&#10;&#10;void ejecutarMenuIndice() {&#10;    limpiarPantalla();&#10;    cout &lt;&lt; &quot;=================================================&quot; &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;           CREAR ÍNDICE INVERTIDO                &quot; &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;=================================================&quot; &lt;&lt; endl;&#10;    &#10;    string nombreArchivo;&#10;    string pathCarpeta;&#10;    &#10;    // Paso 1: Ingresar y validar nombre del archivo con bucle&#10;    do {&#10;        cout &lt;&lt; &quot;\nIngrese el nombre del archivo a crear (debe terminar en .idx): &quot;;&#10;        getline(cin, nombreArchivo);&#10;        &#10;        if (nombreArchivo.empty()) {&#10;            cout &lt;&lt; &quot;[ERROR] El nombre no puede estar vacío.&quot; &lt;&lt; endl;&#10;        } else if (!validarNombreArchivo(nombreArchivo)) {&#10;            cout &lt;&lt; &quot;[ERROR] El archivo debe tener extensión .idx&quot; &lt;&lt; endl;&#10;        } else {&#10;            break;&#10;        }&#10;    } while (true);&#10;    &#10;    // Paso 2: Ingresar y validar path de la carpeta con bucle&#10;    do {&#10;        cout &lt;&lt; &quot;\nIngrese el path de la carpeta donde están los libros: &quot;;&#10;        getline(cin, pathCarpeta);&#10;        &#10;        if (pathCarpeta.empty()) {&#10;            cout &lt;&lt; &quot;[ERROR] El path no puede estar vacío.&quot; &lt;&lt; endl;&#10;        } else if (!validarDirectorio(pathCarpeta)) {&#10;            cout &lt;&lt; &quot;[ERROR] El directorio no existe o no es válido.&quot; &lt;&lt; endl;&#10;            cout &lt;&lt; &quot;Verifique que el path sea correcto.&quot; &lt;&lt; endl;&#10;        } else {&#10;            break;&#10;        }&#10;    } while (true);&#10;    &#10;    // Paso 3: Confirmar antes de ejecutar con validación&#10;    cout &lt;&lt; &quot;\n=================================================&quot; &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;RESUMEN:&quot; &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;Archivo a crear: &quot; &lt;&lt; nombreArchivo &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;Directorio de libros: &quot; &lt;&lt; pathCarpeta &lt;&lt; endl;&#10;    cout &lt;&lt; &quot;=================================================&quot; &lt;&lt; endl;&#10;    &#10;    char confirmacion;&#10;    do {&#10;        cout &lt;&lt; &quot;¿Desea proceder? (s/n): &quot;;&#10;        cin &gt;&gt; confirmacion;&#10;        cin.ignore(); // Limpiar buffer&#10;&#10;        if (confirmacion == 's' || confirmacion == 'S' || confirmacion == 'n' || confirmacion == 'N') {&#10;            break;&#10;        } else {&#10;            cout &lt;&lt; &quot;[ERROR] Por favor ingrese 's' para sí o 'n' para no.&quot; &lt;&lt; endl;&#10;        }&#10;    } while (true);&#10;&#10;    if (confirmacion == 's' || confirmacion == 'S') {&#10;        // Paso 4: Ejecutar programa externo&#10;        crearIndiceInvertido(nombreArchivo, pathCarpeta);&#10;        // El proceso hijo ya muestra los mensajes de resultado&#10;    } else {&#10;        cout &lt;&lt; &quot;\nOperación cancelada por el usuario.&quot; &lt;&lt; endl;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>